Workflow
========

:Test-Layer: functional

Check the initialization of the workflow
----------------------------------------

Let's first create an instance of Uvcsite at the top level:

   >>> from uvcsite.app import Uvcsite
   >>> root = getRootFolder()
   >>> root['app'] = Uvcsite()


Is the Workflow Utility registerd?

   >>> from zope.component import getUtility
   >>> from hurry.workflow.interfaces import IWorkflow
   >>> wu = getUtility(IWorkflow)
   >>> wu
   <hurry.workflow.workflow.Workflow object at ...>

We have registerd 3 transitions (publish, progress and create) on
workflow setup. LetÂ´s check if we get the both... 

   >>> wu.getTransitionById('publish')
   <hurry.workflow.workflow.Transition object at ...>

   >>> wu.getTransitionById('create')
   <hurry.workflow.workflow.Transition object at ...>

   >>> wu.getTransitionById('progress')
   <hurry.workflow.workflow.Transition object at ...>

What happens if we ask for an non existing transition

   >>> wu.getTransitionById('noexist')
   Traceback (most recent call last):
   KeyError: 'noexist'


Check the basic functionality of the workflow
---------------------------------------------

Second create a person object

   >>> from uvcsite import Content
   >>> class Person(Content):
   ...    """ """ 
   >>> klaus = Person()
   >>> root['app']['klaus'] = klaus

Is the initial Workflow state correct?

   >>> from hurry.workflow.interfaces import IWorkflowState
   >>> wf = IWorkflowState(klaus)
   >>> wf.getState()
   0

Publish the workflow to determine if all is correct
we check the a) the workflow state

   >>> from hurry.workflow.interfaces import IWorkflowInfo
   >>> IWorkflowInfo(klaus).fireTransition('publish')
   >>> wf.getState()
   1

and b) the published property should be a datetime object

   >>> klaus.published
   datetime.datetime(...)

Can we set the Object in State Progress and move it then forwart to progress Publish
------------------------------------------------------------------------------------


   >>> root['app']['lars'] = lars = Person()
   >>> wf = IWorkflowState(lars)
   >>> wf.getState()
   0

   >>> IWorkflowInfo(lars).fireTransition('progress')
   >>> wf.getState()
   2

   >>> IWorkflowInfo(lars).fireTransition('fix')
   >>> wf.getState()
   1
