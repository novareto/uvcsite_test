Functional Doctest
==================

:Test-Layer: functional

  >>> import grok
  >>> import uvcsite
  >>> from uvcsite.app import Uvcsite
  >>> from zope.component.hooks import setSite
  >>> from grokcore.component.testing import grok_component

Setup

  >>> root = getRootFolder()
  >>> root['app'] = app = Uvcsite()
  >>> setSite(root['app'])


Permission for uvc.Member

  >>> class CanView(grok.Permission):
  ...     grok.name('uvc.canView')

  >>> grok_component('CanView', CanView)
  True

Setting up A View

  >>> class GroupView(grok.View):
  ...     grok.context(uvcsite.IUVCSite)
  ...     grok.require('uvc.canView')
  ...
  ...     def render(self):
  ...         return self.request.interaction.checkPermission('uvc.canView', self.context) 

  >>> grok_component('GroupView', GroupView)
  True

  >>> from zope.pluggableauth.factories import PrincipalInfo, AuthenticatedPrincipalFactory

  >>> adp = PrincipalInfo('0101010001', 'A88889999', 'A88889999', 'A88889999')

  >>> class Authenticator(object):
  ...     prefix = ""
  ...     def getAuthenticatorPlugins(self):
  ...         return []


  >>> from zope.component import getMultiAdapter
  >>> from zope.publisher.browser import TestRequest
  >>> import zope.security.management
  >>> from zope.security import canAccess

  >>> from zope.authentication.interfaces import IAuthentication
  >>> from zope.component import getUtility
  >>> auth = getUtility(IAuthentication)
  >>> auth
  <zope.pluggableauth.authentication.PluggableAuthentication object at ...>

  >>> request = TestRequest()
  >>> principal = AuthenticatedPrincipalFactory(adp, request)(Authenticator())
  >>> principal.groups
  ['zope.Everybody', 'zope.Authenticated', 'uvc.AdHocGroup', 'uvc.Member']


  >>> auth.getPrincipal('uvc.Member')
  Principal('uvc.Member')

  >>> request.setPrincipal(principal)
  >>> zope.security.management.newInteraction(request)

  >>> groupview = getMultiAdapter((app, request), name=u'groupview')
  >>> groupview.render()
  False

  >>> canAccess(groupview, '__call__')
  False

  >>> from zope.securitypolicy.interfaces import IPrincipalPermissionManager
  >>> ppm = IPrincipalPermissionManager(root['app'])
  >>> ppm
  <zope.securitypolicy.principalpermission.AnnotationPrincipalPermissionManager object at ...>

  >>> ppm.grantPermissionToPrincipal('uvc.canView', 'uvc.Member')

  >>> groupview = getMultiAdapter((app, request), name=u'groupview')
  >>> groupview.render()
  True

  >>> canAccess(groupview, '__call__')
  True 
