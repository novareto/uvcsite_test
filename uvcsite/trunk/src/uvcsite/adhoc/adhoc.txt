Ad Hoc
======

Das AdHoc System der UV-Webcommunity stellt eine Web-Schnittstelle
für den Kunden/Versicherten bereit, die es Ihm ermöglicht Dokumente die er auf 
postalischen Weg erhält, online an die BG zu versenden.

Dieses System läuft technisch gesehen unter der UVCSite, allerdings wird
ein neuer BrowserLayer dafür definiert. (localhost:8080/++skin++adhoc/app)

Die AdHoc Benutzer arbeiten in der gleichen Site wie normale Benutzer,
Ziel ist es im HomeFolder der Unternehmen einen ProductFolder ADHoc
zu erstellen. In diesem Ordner werden dann die ADHocDokumente abgelegt.

Über den BrowserLayer IAdHocLayer steuern wir die Unterschiedlichen
IndexSeiten etc...

:Test-Layer: functional

Setup
-----

  >>> from uvcsite.app import Uvcsite 
  >>> root = getRootFolder()

  >>> root['adhoc'] = app = Uvcsite()
  >>> app
  <uvcsite.app.Uvcsite object at ...>

  >>> from zope.component import getMultiAdapter
  >>> from zope.interface import alsoProvides
  >>> from zope.publisher.browser import TestRequest
  >>> from uvcsite.adhoc import IAdHocLayer

Unterschiedliche Indexseiten pro Layer
--------------------------------------

  >>> request = TestRequest()
  >>> uvcsite_view = getMultiAdapter((app, request), name="index")
  >>> uvcsite_view
  <uvcsite.tests.views.Index object at ...>
 
Wir markieren den Request mit unserem Layer...

  >>> adhoc_request = TestRequest()
  >>> alsoProvides(adhoc_request, IAdHocLayer)

  >>> adhoc_view = getMultiAdapter((app, adhoc_request), name="index")
  >>> adhoc_view
  <uvcsite.tests.adhoc.Index object at ...>

  >>> adhoc_view is uvcsite_view
  False


Unterschiedliche Menus pro Layer
--------------------------------

  >>> from zope.viewlet.interfaces import IContentProvider

  >>> uvc_gm = getMultiAdapter((app, request, uvcsite_view), IContentProvider, name="uvc.global.menu")
  >>> uvc_gm
  <uvc.layout.menus.GlobalMenu object at ...>

  >>> adhoc_gm = getMultiAdapter((app, adhoc_request, adhoc_view), IContentProvider, name="uvc.global.menu")
  >>> adhoc_gm
  <uvcsite.adhoc.menus.ADHocGlobalMenu object at ...>

  >>> adhoc_gm is uvc_gm
  False


Event für AdHocUsers
--------------------

  >>> from zope.pluggableauth.factories import PrincipalInfo, AuthenticatedPrincipalFactory
  >>> request = TestRequest()

  >>> class Authenticator(object):
  ...     prefix = ""
  ...     def getAuthenticatorPlugins(self):
  ...         return []

  >>> adp = PrincipalInfo('0101010001', 'A88889999', 'A88889999', 'A88889999')
  >>> adp
  PrincipalInfo('0101010001')

  >>> adp = AuthenticatedPrincipalFactory(adp, request)(Authenticator())

  >>> adp.id
  '0101010001'

  >>> adp.title
  'A88889999'

  >>> from uvcsite.adhoc.interfaces import IAdHocPrincipal
  >>> IAdHocPrincipal.providedBy(adp)
  True

  >>> p = PrincipalInfo('0101010001', '0101010001', '0101010001', '0101010001')
  >>> p = AuthenticatedPrincipalFactory(p, request)(Authenticator())
  >>> IAdHocPrincipal.providedBy(p)
  False 

  >>> p.groups
  ['zope.Everybody', 'zope.Authenticated', 'uvc.Member']


Adapter für AddHocUser
----------------------

  >>> from uvcsite.adhoc.interfaces import IAdHocUserInfo
  >>> ahui = IAdHocUserInfo(adp)
  >>> ahui
  <uvcsite.adhoc.adapter.AdHocUserInfo object at ...>

  >>> ahui.isAdHocUser
  True


  >>> ahui = IAdHocUserInfo(p)
  >>> ahui
  <uvcsite.adhoc.adapter.AdHocUserInfo object at ...>

  >>> ahui.isAdHocUser
  False 
